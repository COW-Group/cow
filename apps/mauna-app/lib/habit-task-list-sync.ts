import { DatabaseService } from './database-service'
import type { TaskList } from './types'

/**
 * Service for synchronizing habit groups with task lists
 * Ensures habit groups automatically create and link to task lists
 */
export class HabitTaskListSyncService {
  private databaseService: DatabaseService
  private userId: string

  constructor(userId: string, databaseService: DatabaseService) {
    this.userId = userId
    this.databaseService = databaseService
  }

  /**
   * Get or create a task list for a habit group
   * @param habitGroup - The name of the habit group
   * @returns The task list ID
   */
  async getOrCreateTaskListForHabitGroup(habitGroup: string): Promise<string> {
    if (!habitGroup || habitGroup.trim() === '') {
      throw new Error('Habit group name cannot be empty')
    }

    try {
      // Check if a task list with this name already exists
      const existingLists = await this.databaseService.fetchTaskLists(this.userId)
      const existingList = existingLists.find((list) => list.name === habitGroup)

      if (existingList) {
        return existingList.id
      }

      // Create a new task list for this habit group
      const taskList = await this.createHabitGroupTaskList(habitGroup)
      return taskList.id
    } catch (error) {
      console.error(`Failed to get or create task list for habit group "${habitGroup}":`, error)
      throw error
    }
  }

  /**
   * Create a new task list specifically for a habit group
   * @param habitGroup - The name of the habit group
   * @returns The created task list
   */
  private async createHabitGroupTaskList(habitGroup: string): Promise<TaskList> {
    try {
      // Get the highest position to add at the end
      const existingLists = await this.databaseService.fetchTaskLists(this.userId)
      const maxPosition = existingLists.reduce((max, list) => Math.max(max, list.position), -1)

      // Create task list (UUID is auto-generated by database)
      const { data, error } = await this.databaseService.supabase
        .from('task_lists')
        .insert({
          user_id: this.userId,
          name: habitGroup,
          position: maxPosition + 1,
          suggested_time_block_range: null,
        })
        .select()
        .single()

      if (error) throw error
      if (!data) throw new Error('Failed to create task list: No data returned')

      return {
        id: data.id,
        name: data.name,
        userId: data.user_id,
        createdAt: data.created_at,
        position: data.position || 0,
        suggestedTimeBlockRange: data.suggested_time_block_range,
        steps: [],
      }
    } catch (error) {
      console.error(`Failed to create habit group task list for "${habitGroup}":`, error)
      throw error
    }
  }

  /**
   * Link a habit to its habit group's task list
   * @param habitId - The ID of the habit
   * @param habitGroup - The name of the habit group
   */
  async linkHabitToTaskList(habitId: string, habitGroup: string): Promise<void> {
    if (!habitGroup || habitGroup.trim() === '') {
      // If no habit group, unlink from task list
      await this.unlinkHabitFromTaskList(habitId)
      return
    }

    try {
      const taskListId = await this.getOrCreateTaskListForHabitGroup(habitGroup)

      const { error } = await this.databaseService.supabase
        .from('steps')
        .update({ task_list_id: taskListId })
        .eq('id', habitId)
        .eq('user_id', this.userId)

      if (error) throw error
    } catch (error) {
      console.error(`Failed to link habit ${habitId} to task list:`, error)
      throw error
    }
  }

  /**
   * Unlink a habit from its task list
   * @param habitId - The ID of the habit
   */
  async unlinkHabitFromTaskList(habitId: string): Promise<void> {
    try {
      const { error } = await this.databaseService.supabase
        .from('steps')
        .update({ task_list_id: null })
        .eq('id', habitId)
        .eq('user_id', this.userId)

      if (error) throw error
    } catch (error) {
      console.error(`Failed to unlink habit ${habitId} from task list:`, error)
      throw error
    }
  }

  /**
   * Sync all habits with their task lists
   * This ensures all existing habits with groups are linked to task lists
   */
  async syncAllHabits(): Promise<{ synced: number; errors: string[] }> {
    const errors: string[] = []
    let synced = 0

    try {
      // Fetch all habits for this user
      const { data: habits, error } = await this.databaseService.supabase
        .from('steps')
        .select('id, habit_group, task_list_id')
        .eq('user_id', this.userId)
        .eq('tag', 'habit')

      if (error) throw error
      if (!habits) return { synced: 0, errors: [] }

      // Group habits by habit_group
      const habitsByGroup = new Map<string, string[]>()
      const uncategorizedHabits: string[] = []

      for (const habit of habits) {
        if (habit.habit_group) {
          if (!habitsByGroup.has(habit.habit_group)) {
            habitsByGroup.set(habit.habit_group, [])
          }
          habitsByGroup.get(habit.habit_group)!.push(habit.id)
        } else {
          uncategorizedHabits.push(habit.id)
        }
      }

      // Sync each group
      for (const [groupName, habitIds] of habitsByGroup.entries()) {
        try {
          const taskListId = await this.getOrCreateTaskListForHabitGroup(groupName)

          // Link all habits in this group
          const { error: updateError } = await this.databaseService.supabase
            .from('steps')
            .update({ task_list_id: taskListId })
            .in('id', habitIds)
            .eq('user_id', this.userId)

          if (updateError) throw updateError
          synced += habitIds.length
        } catch (error: any) {
          errors.push(`Failed to sync group "${groupName}": ${error.message}`)
        }
      }

      // Unlink uncategorized habits
      if (uncategorizedHabits.length > 0) {
        const { error: unlinkError } = await this.databaseService.supabase
          .from('steps')
          .update({ task_list_id: null })
          .in('id', uncategorizedHabits)
          .eq('user_id', this.userId)

        if (unlinkError) {
          errors.push(`Failed to unlink uncategorized habits: ${unlinkError.message}`)
        }
      }

      return { synced, errors }
    } catch (error: any) {
      console.error('Failed to sync all habits:', error)
      return { synced, errors: [...errors, `Sync failed: ${error.message}`] }
    }
  }

  /**
   * Check if a task list is a habit group task list
   * @param taskList - The task list to check
   * @returns true if the task list is for a habit group
   */
  static async isHabitGroupTaskList(taskList: TaskList, databaseService: any): Promise<boolean> {
    try {
      // Check if there are any habits with this task list
      const { data } = await databaseService.supabase
        .from('steps')
        .select('id')
        .eq('task_list_id', taskList.id)
        .eq('tag', 'habit')
        .limit(1)

      return data && data.length > 0
    } catch (error) {
      return false
    }
  }

  /**
   * Get all habit group task lists
   * @returns Array of habit group task lists
   */
  async getHabitGroupTaskLists(): Promise<TaskList[]> {
    try {
      const allLists = await this.databaseService.fetchTaskLists(this.userId)
      const habitGroupLists: TaskList[] = []

      for (const list of allLists) {
        if (await HabitTaskListSyncService.isHabitGroupTaskList(list, this.databaseService)) {
          habitGroupLists.push(list)
        }
      }

      return habitGroupLists
    } catch (error) {
      console.error('Failed to get habit group task lists:', error)
      return []
    }
  }

  /**
   * Rename a habit group and its associated task list
   * @param oldGroupName - The old group name
   * @param newGroupName - The new group name
   */
  async renameHabitGroup(oldGroupName: string, newGroupName: string): Promise<void> {
    try {
      // Find the task list for the old group
      const allLists = await this.databaseService.fetchTaskLists(this.userId)
      const oldTaskList = allLists.find((list) => list.name === oldGroupName)

      if (oldTaskList) {
        // Check if it's a habit group task list
        const isHabitList = await HabitTaskListSyncService.isHabitGroupTaskList(
          oldTaskList,
          this.databaseService
        )

        if (isHabitList) {
          // Update the task list name
          const { error: updateListError } = await this.databaseService.supabase
            .from('task_lists')
            .update({ name: newGroupName })
            .eq('id', oldTaskList.id)
            .eq('user_id', this.userId)

          if (updateListError) throw updateListError
        }
      }

      // Update all habits with the old group name
      const { error: updateHabitsError } = await this.databaseService.supabase
        .from('steps')
        .update({ habit_group: newGroupName })
        .eq('habit_group', oldGroupName)
        .eq('user_id', this.userId)
        .eq('tag', 'habit')

      if (updateHabitsError) throw updateHabitsError
    } catch (error) {
      console.error(`Failed to rename habit group from "${oldGroupName}" to "${newGroupName}":`, error)
      throw error
    }
  }

  /**
   * Delete a habit group task list
   * This will unlink all habits but won't delete the habits themselves
   * @param habitGroup - The name of the habit group
   */
  async deleteHabitGroupTaskList(habitGroup: string): Promise<void> {
    try {
      // Find the task list for this group
      const allLists = await this.databaseService.fetchTaskLists(this.userId)
      const taskList = allLists.find((list) => list.name === habitGroup)

      if (!taskList) return

      // Check if it's a habit group task list
      const isHabitList = await HabitTaskListSyncService.isHabitGroupTaskList(
        taskList,
        this.databaseService
      )

      if (!isHabitList) return

      // Unlink all habits from this task list
      const { error: unlinkError } = await this.databaseService.supabase
        .from('steps')
        .update({ task_list_id: null, habit_group: null })
        .eq('task_list_id', taskList.id)
        .eq('user_id', this.userId)

      if (unlinkError) throw unlinkError

      // Delete the task list
      const { error: deleteError } = await this.databaseService.supabase
        .from('task_lists')
        .delete()
        .eq('id', taskList.id)
        .eq('user_id', this.userId)

      if (deleteError) throw deleteError
    } catch (error) {
      console.error(`Failed to delete habit group task list "${habitGroup}":`, error)
      throw error
    }
  }
}
